-------------------------------------- 테이블 생성 SQL문
CREATE TABLE CUSTOMER
(
    CUSTOMER_ID      VARCHAR2(20)    PRIMARY KEY, 
    CUSTOMER_PW      VARCHAR2(8)     NOT NULL, 
    CUSTOMER_NAME    VARCHAR2(30)    NOT NULL, 
    CUSTOMER_TEL     VARCHAR2(30)    NOT NULL
)
/
COMMENT ON TABLE CUSTOMER IS '회원가입 정보 테이블'
/
COMMENT ON COLUMN CUSTOMER.CUSTOMER_ID IS '아이디'
/
COMMENT ON COLUMN CUSTOMER.CUSTOMER_PW IS '비밀번호'
/
COMMENT ON COLUMN CUSTOMER.CUSTOMER_NAME IS '이름'
/
COMMENT ON COLUMN CUSTOMER.CUSTOMER_TEL IS '전화번호'
/
-- CUSTOMER Table Create SQL
CREATE TABLE PAYMENT
(
    PAYMENT_UID        NUMBER          PRIMARY KEY , 
    CUSTOMER_ID        VARCHAR2(20)    references CUSTOMER(CUSTOMER_ID) on delete cascade, 
    PAYMENT_CREDIT     VARCHAR2(10)    NOT NULL, 
    TOTAL_PRICE        NUMBER          NOT NULL, 
    PAYMENT_DATE       DATE            NOT NULL, 
    RESERVATION_NUM    NUMBER          NOT NULL
)
/
COMMENT ON TABLE PAYMENT IS '결제정보 테이블'
/
COMMENT ON COLUMN PAYMENT.PAYMENT_UID IS 'NEXTVAL'
/
COMMENT ON COLUMN PAYMENT.CUSTOMER_ID IS '아이디'
/
COMMENT ON COLUMN PAYMENT.PAYMENT_CREDIT IS '결제방법'
/
COMMENT ON COLUMN PAYMENT.TOTAL_PRICE IS '결제금액'
/
COMMENT ON COLUMN PAYMENT.PAYMENT_DATE IS '결제일자'
/
COMMENT ON COLUMN PAYMENT.RESERVATION_NUM IS 'NEXTVAL'
/
-- CUSTOMER Table Create SQL
CREATE TABLE HALL_INFO
(
    CONCERT_NUM      NUMBER           PRIMARY KEY, 
    HALL_LOCATION    VARCHAR2(100)    NOT NULL, 
    SEAT_SUM         NUMBER           NOT NULL 
)
/
COMMENT ON COLUMN HALL_INFO.CONCERT_NUM IS '콘서트번호'
/
COMMENT ON COLUMN HALL_INFO.HALL_LOCATION IS '콘서트위치'
/
COMMENT ON COLUMN HALL_INFO.SEAT_SUM IS '총좌석수'
/
-- CUSTOMER Table Create SQL
CREATE TABLE SCHEDULE_INFO
(
    CONCERT_DATE    DATE             NOT NULL, 
    CONCERT_NUM     NUMBER           PRIMARY KEY references HALL_INFO(CONCERT_NUM) on delete cascade, 
    HALL_NUM        NUMBER           NOT NULL, 
    CONCERT_NAME    VARCHAR2(100)    NOT NULL
)
/

COMMENT ON TABLE SCHEDULE_INFO IS '콘서트 스케쥴'
/
COMMENT ON COLUMN SCHEDULE_INFO.CONCERT_DATE IS '콘서트일자'
/
COMMENT ON COLUMN SCHEDULE_INFO.CONCERT_NUM IS '콘서트번호'
/
COMMENT ON COLUMN SCHEDULE_INFO.HALL_NUM IS '콘서트홀번호'
/
COMMENT ON COLUMN SCHEDULE_INFO.CONCERT_NAME IS '콘서트제목'
/
-- CUSTOMER Table Create SQL
CREATE TABLE SEAT_INFO
(
    CUSTOMER_ID  VARCHAR2(20)  NOT NULL,
    SEAT_NUM       VARCHAR2(20)    PRIMARY KEY, 
    SEAT_GRADE     VARCHAR2(20)    NOT NULL, 
    CONCERT_NUM    NUMBER          NOT NULL references HALL_INFO(CONCERT_NUM) on delete cascade, 
    SEAT_PRICE     NUMBER          NOT NULL, 
    HAVESEAT       VARCHAR2(20)    NOT NULL 
)
/
COMMENT ON COLUMN SEAT_INFO.SEAT_NUM IS '좌석번호'
/
COMMENT ON COLUMN SEAT_INFO.SEAT_GRADE IS '좌석등급'
/
COMMENT ON COLUMN SEAT_INFO.CONCERT_NUM IS '콘서트번호'
/
COMMENT ON COLUMN SEAT_INFO.SEAT_PRICE IS '좌석금액'
/
COMMENT ON COLUMN SEAT_INFO.HAVESEAT IS '좌석배정유무'
/
-- CUSTOMER Table Create SQL
CREATE TABLE TICKET
(
    TICKET_NUM         NUMBER          PRIMARY KEY, 
    PAYMENT_UID        NUMBER          NOT NULL references PAYMENT(PAYMENT_UID) on delete cascade, 
    CONCERT_DATE       DATE            NOT NULL, 
    CONCERT_NAME    VARCHAR2(100)    NOT NULL,
    CONCERT_NUM        NUMBER          NOT NULL references SCHEDULE_INFO(CONCERT_NUM) on delete cascade, 
    HALL_NUM           NUMBER          NOT NULL, 
    SEAT_NUM           VARCHAR2(20)    NOT NULL references SEAT_INFO(SEAT_NUM) on delete cascade, 
    SEAT_PRICE         NUMBER          NOT NULL, 
    CUSTOMER_ID        VARCHAR2(20)    NOT NULL, 
    RESERVATION_NUM    NUMBER          NOT NULL
)
/

COMMENT ON TABLE TICKET IS '티켓 예매 후 화면'
/

COMMENT ON COLUMN TICKET.TICKET_NUM IS 'NEXTVAL'
/

COMMENT ON COLUMN TICKET.PAYMENT_UID IS '결제번호'
/

COMMENT ON COLUMN TICKET.CONCERT_DATE IS '콘서트일자'
/

COMMENT ON COLUMN TICKET.CONCERT_NUM IS '콘서트번호'
/

COMMENT ON COLUMN TICKET.HALL_NUM IS '콘서트홀번호'
/

COMMENT ON COLUMN TICKET.SEAT_NUM IS '좌석번호'
/

COMMENT ON COLUMN TICKET.SEAT_PRICE IS '좌석금액'
/

COMMENT ON COLUMN TICKET.CUSTOMER_ID IS '아이디'
/

COMMENT ON COLUMN TICKET.RESERVATION_NUM IS '예매번호'
/

------------------------------------------------------시퀀스
CREATE SEQUENCE  "MDGUEST"."PAYMENT_UID"  
MINVALUE 1 MAXVALUE 1000
INCREMENT BY 1 
START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
------
CREATE SEQUENCE  "MDGUEST"."RESERVATION_NUM"  
MINVALUE 1 MAXVALUE 1000
INCREMENT BY 1 
START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
------
CREATE SEQUENCE  "MDGUEST"."TICKET_NUM"  
MINVALUE 1 MAXVALUE 1000
INCREMENT BY 1 
START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

-------------------------------------------------------고객 트리거 작성
--고객테이블에 대한 로그를 남길 테이블 작성
CREATE TABLE CUSTOMER_LOG
(
CUSTOMER_ID VARCHAR2(20),
CUSTOMER_PW VARCHAR2(20),
CUSTOMER_NAME VARCHAR2(50), 
CUSTOMER_TEL VARCHAR2(50),
CUSTOMER_LOGDATE DATE DEFAULT SYSDATE,
JOB_GUBUN VARCHAR2(100)
);
--========================================
--INSERT,UPDATE,DELETE이벤트가 발생할 때 동작할 트리거
create or replace TRIGGER CUSTOMER_IUD
    AFTER INSERT OR UPDATE OR DELETE ON CUSTOMER
    FOR EACH ROW
BEGIN

    --INSERT 이벤트 발생시 로그 남기기
    IF INSERTING THEN        
        INSERT INTO CUSTOMER_LOG
            (CUSTOMER_ID, CUSTOMER_PW, CUSTOMER_NAME, CUSTOMER_TEL, JOB_GUBUN)
        VALUES (:NEW.CUSTOMER_ID, :NEW.CUSTOMER_PW, :NEW.CUSTOMER_NAME,
            :NEW.CUSTOMER_TEL, 'INSERT-IUD');
    END IF;
    
    --UPDATE 이벤트 발생시 로그 남기기
    IF UPDATING THEN
        INSERT INTO CUSTOMER_LOG
           (CUSTOMER_ID, CUSTOMER_PW, CUSTOMER_NAME, CUSTOMER_TEL, JOB_GUBUN)
        VALUES (:NEW.CUSTOMER_ID
             ,  :OLD.CUSTOMER_PW ||' > ' || :NEW.CUSTOMER_PW
             ,  :OLD.CUSTOMER_NAME ||' > '|| :NEW.CUSTOMER_NAME
             ,  :OLD.CUSTOMER_TEL ||' > '|| :NEW.CUSTOMER_TEL
             ,  'UPDATE-IUD');
    END IF;
    
    --DELETE 이벤트 발생시 로그 남기기
    IF DELETING THEN
        INSERT INTO CUSTOMER_LOG
           (CUSTOMER_ID, CUSTOMER_PW, CUSTOMER_NAME, CUSTOMER_TEL, JOB_GUBUN)
        VALUES (:NEW.CUSTOMER_ID
         ,  :OLD.CUSTOMER_PW ||' > ' || :NEW.CUSTOMER_PW
         ,  :OLD.CUSTOMER_PW ||' > '|| :NEW.CUSTOMER_PW
         ,  :OLD.CUSTOMER_TEL ||' > '|| :NEW.CUSTOMER_TEL
         ,  'DELETE-IUD');
    END IF;
END;

---------------------------------------------------------------------PAYMENT_LOG  테이블 생성
CREATE TABLE PAYMENT_LOG
(
    PAYMENT_UID        NUMBER          , 
    CUSTOMER_ID        VARCHAR2(20) , 
    PAYMENT_CREDIT     VARCHAR2(10) , 
    TOTAL_PRICE        NUMBER , 
    PAYMENT_DATE       DATE  , 
    RESERVATION_NUM    NUMBER ,
    LOGDATE DATE DEFAULT SYSDATE, 
        IUD VARCHAR2(100 BYTE)
);
---------------------------------------------------------------------PAYMENT 트리거 생성
create or replace TRIGGER TRIGGER_IUD
        AFTER INSERT OR UPDATE OR DELETE ON PAYMENT
        FOR EACH ROW
BEGIN
        -- INSERT 이벤트 발생시 로그 남기기
        IF INSERTING THEN 
        INSERT INTO PAYMENT_LOG
        (PAYMENT_UID, CUSTOMER_ID, PAYMENT_CREDIT, TOTAL_PRICE, PAYMENT_DATE, RESERVATION_NUM, IUD )
        VALUES (:NEW.PAYMENT_UID, :NEW.CUSTOMER_ID, :NEW.PAYMENT_CREDIT,
                       :NEW.TOTAL_PRICE,  :NEW.PAYMENT_DATE, :NEW.RESERVATION_NUM,  '결제완료');
        END IF ;

        -- DELETE 이벤트 발생시 로그 남기기
        IF DELETING THEN
        INSERT INTO PAYMENT_LOG
                                (PAYMENT_UID, CUSTOMER_ID, PAYMENT_CREDIT, TOTAL_PRICE, PAYMENT_DATE, RESERVATION_NUM, IUD)
        VALUES (:OLD.PAYMENT_UID, :OLD.CUSTOMER_ID, :OLD.PAYMENT_CREDIT,
                       :OLD.TOTAL_PRICE,  :OLD.PAYMENT_DATE, :OLD.RESERVATION_NUM,  '결제취소') ;
        END IF ;
END ;
----------------------------------------------------------------------
        
------------------------------------------------------------------HALL_INFO 기본정보 입력
INSERT INTO HALL_INFO VALUES (1 ,'상암월드컵경기장',100 );
INSERT INTO HALL_INFO VALUES (2 ,'KBS ARENA',100 );
INSERT INTO HALL_INFO VALUES (3 ,'경희대학교평화의전당',100 );
INSERT INTO HALL_INFO VALUES (4 ,'블루스퀘어아이마켓홀',100 );
INSERT INTO HALL_INFO VALUES (5 ,'올림픽공원체조경기장',100 );
------------------------------------------------------------------SCHEDULE_INFO 기본정보 입력
INSERT INTO SCHEDULE_INFO VALUES ('2019/12/25' ,'1', '1', '방탄소년단');
INSERT INTO SCHEDULE_INFO VALUES ('2019/12/25' ,'2', '2', '미쓰트롯트');
INSERT INTO SCHEDULE_INFO VALUES ('2019/12/25' ,'3', '3', '악동뮤지션');
INSERT INTO SCHEDULE_INFO VALUES ('2019/12/25' ,'4', '4', '윤도현밴드');
INSERT INTO SCHEDULE_INFO VALUES ('2019/12/25' ,'5', '5', '싸이콘서트');
------------------------------------------------------------------SEAT_INFO 기본정보 입력
INSERT INTO SEAT_INFO VALUES ('TEST1', '1:VIP-25' ,'VIP', 1, 150000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST2', '2:SR-24' ,'SR', 2, 130000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST3', '3:S-23' ,'S', 3, 100000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST4', '4:R-22' ,'R', 4, 90000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST5', '5:VIP-21' ,'VIP', 5, 150000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST6', '1:VIP-15' ,'VIP', 1, 150000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST7', '2:SR-12' ,'SR', 2, 130000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST8', '3:S-10' ,'S', 3, 100000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST9', '4:R-19' ,'R', 4, 90000, '배정됨' );
INSERT INTO SEAT_INFO VALUES ('TEST10', '5:VIP-11' ,'VIP', 5, 150000, '배정됨' );
------------------------------------------------------------------CUSTOMER 기본정보 입력
INSERT INTO CUSTOMER VALUES ('TEST1', '0000' ,'TEST1', '010-0000-0000' );
INSERT INTO CUSTOMER VALUES ('TEST2', '0000' ,'TEST2', '010-1111-1111' );
INSERT INTO CUSTOMER VALUES ('TEST3', '0000' ,'TEST3', '010-2222-2222' );
INSERT INTO CUSTOMER VALUES ('TEST4', '0000' ,'TEST4', '010-3333-3333' );
INSERT INTO CUSTOMER VALUES ('TEST5', '0000' ,'TEST5', '010-4444-4444' );
INSERT INTO CUSTOMER VALUES ('TEST6', '0000' ,'TEST6', '010-5555-5555' );
INSERT INTO CUSTOMER VALUES ('TEST7', '0000' ,'TEST7', '010-6666-6666' );
INSERT INTO CUSTOMER VALUES ('TEST8', '0000' ,'TEST8', '010-7777-7777' );
INSERT INTO CUSTOMER VALUES ('TEST9', '0000' ,'TEST9', '010-8888-8888' );
INSERT INTO CUSTOMER VALUES ('TEST10', '0000' ,'TEST10', '010-9999-9999' );



-------------------------- 테이블, 시퀀스 삭제
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE HALL_INFO CASCADE CONSTRAINTS;
DROP TABLE PAYMENT CASCADE CONSTRAINTS;
DROP TABLE SCHEDULE_INFO CASCADE CONSTRAINTS;
DROP TABLE SEAT_INFO CASCADE CONSTRAINTS;
DROP TABLE TICKET CASCADE CONSTRAINTS;

DROP SEQUENCE PAYMENT_UID;
DROP SEQUENCE RESERVATION_NUM;
DROP SEQUENCE TICKET_NUM;

----------------------- 좌석등급 번호 함수
SELECT SEAT_NUM FROM SEAT_INFO WHERE CUSTOMER_ID = ?;

SELECT SEAT_NUM, instr(seat_num, '-'), instr(seat_num, ':')
     , substr(seat_num, 1, instr(seat_num, ':') - 1) as concertnum
     , SUBSTR(SEAT_NUM, INSTR(SEAT_NUM, ':') + 1, INSTR(SEAT_NUM, '-') - 3) AS DBGRADE
     , TO_NUMBER(SUBSTR(SEAT_NUM, INSTR(SEAT_NUM, '-') + 1 )) DBNUM
  FROM SEAT_INFO
 WHERE concert_num = 1;
 
---------------------------관리자 테이블
CREATE TABLE ADMIN (
   ID VARCHAR2(20 BYTE), 
        PASSWORD VARCHAR2(20 BYTE), 
        NAME VARCHAR2(20 BYTE)
   ); 
insert into admin values ('lhh','0000','이현희');   

